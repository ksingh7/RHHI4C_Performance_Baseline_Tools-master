heat_template_version: 2016-10-14

description: This HOT will create an external/tenant netowrking, user, project, key, flavor and security group.

parameters:
  provider_net_name:
    type: string
    description: Name of the tenant network.
    default: 'public_network1'
  provider_subnet_name:
    type: string
    description: Name of the tenant subnet.
    default: 'public_network1_subnet1'
  provider_net_cidr:
    type: string
    description: CIDR for the provider(external) network
    default: 100.67.139.0/26
  provider_net_gateway:
    type: string
    description: GW for the external network
    default: 100.67.139.1
  provider_net_pool_start:
    type: string 
    description: start of the IP pool for the external network
    default: 100.67.139.20
  provider_net_pool_end:
    type: string
    description: end of the IP pool for the external network
    default: 100.67.139.49
  provider_physical_network:
    type: string
    description: Provider physical network
    default: physext
  provider_segmentation_id:
    type: string
    description: Provider segmentation ID
    default: 1391
  
  tenant_net_name:
    type: string
    description: Name of the tenant network.
    default: 'private_network1'
  tenant_subnet_name:
    type: string
    description: Name of the tenant subnet.
    default: 'private_network1_subnet1'
  tenant_router_name:
    type: string
    description: Name of the tenant router.
    default: 'private_network1_router1'
  tenant_net_cidr:
    type: string
    description: CIDR for the tenant network
    default: 192.168.1.0/24
  tenant_net_gateway:
    type: string
    description: gateway for the tenant network
    default: 192.168.1.254
  tenant_net_pool_start:
    type: string
    description: network pool start. typically .11 of whatever /24 is defined
    default: 192.168.1.10
  tenant_net_pool_end:
    type: string
    description: network pool end. typically .200 of whatever /24 is defined
    default: 192.168.1.100
  tenant_dns_nameservers:
    type: string
    description: Dns nameserver
    default: 8.8.8.8
  tenant_security_group:
    type: string
    description: name of the security group
    default: 'security_group1' 

  perf_project_name:
    type: string
    description: project name
    default: hciperf
  perf_user_role:
    type: string
    description: name of the user role.
    default: member
  perf_project_user:
    type: string
    description: Project user
    default: hciperf
  perf_project_user_passwd:
    type: string
    description: project user initial password
    default: password

resources:

  hci_perf_project:
    type: OS::Keystone::Project
    properties:
      name: { get_param: perf_project_name }
      domain: default
      description: New HCI Perf Project
  hci_perf_role:
    type: OS::Keystone::Role
    properties:
      name: { get_param: perf_user_role }
  hci_user:
    type: OS::Keystone::User
    properties:
      name: { get_param: perf_project_user }
      domain: default
      description: Perf user
      default_project: { get_resource: hci_perf_project }
      password: { get_param: perf_project_user_passwd }
      roles:
        - role: { get_resource: hci_perf_role }
          project: { get_resource: hci_perf_project }

  generated_key_pair:
    type: OS::Nova::KeyPair
    properties:
      name: stack
      save_private_key: True

  instance_flavor:
    type: OS::Nova::Flavor
    properties:
      ephemeral: 1
      is_public: true
      name: m1.small
      ram: 1024
      vcpus: 2
  
  instance_flavor:
    type: OS::Nova::Flavor
    properties:
      is_public: true
      name: m1.medium
      ram: 8192
      vcpus: 4
      disk: 40    

  provider_network:
    type: OS::Neutron::ProviderNet
    properties:
      name: { get_param: provider_net_name }
      network_type: vlan
      physical_network: { get_param: provider_physical_network }
      segmentation_id: { get_param: provider_segmentation_id }
      router_external: True

  provider_subnet:
    type: OS::Neutron::Subnet
    properties:
      network_id: { get_resource: provider_network }
      cidr: { get_param: provider_net_cidr }
      enable_dhcp: True
      gateway_ip: { get_param: provider_net_gateway }
      allocation_pools:
        - start: { get_param: provider_net_pool_start }
          end: { get_param: provider_net_pool_end }

  tenant_net:
    type: OS::Neutron::Net
    properties:
      name: { get_param: tenant_net_name }

  tenant_subnet:
    type: OS::Neutron::Subnet
    properties:
      name: { get_param: tenant_subnet_name }
      network_id: { get_resource: tenant_net }
      cidr: { get_param: tenant_net_cidr }
      dns_nameservers:
      - { get_param: tenant_dns_nameservers }

  tenant_router:
    type: OS::Neutron::Router
    properties:
      name: { get_param: tenant_router_name }
      external_gateway_info:
        network: { get_resource: provider_network }

  router_interface:
    type: OS::Neutron::RouterInterface
    properties:
      router_id: { get_resource: tenant_router }
      subnet_id: { get_resource: tenant_subnet }
  
  security_group:
    type: OS::Neutron::SecurityGroup
    properties:
      name: { get_param: tenant_security_group }
      description: Open ICMP & all TCP ports. Restrict some ports if you like to
      rules:
       - protocol: icmp
       - protocol: tcp
         port_range_min: 1
         port_range_max: 65535

outputs:

  private_key:
    description: The private key to access instance 
    value: { get_attr: [generated_key_pair, private_key] }
